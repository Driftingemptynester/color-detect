import requests
import shutil
import os
import xlwt
import cv2
import matplotlib.pyplot as plt
from PIL import Image
from io import BytesIO
import numpy

# 0 前期准备，Useless    Add your Computer Vision subscription key and endpoint to your environment variables.
subscription_key = 'fe7e53b052214d78a709e16c8344528d'
endpoint = 'https://color-detect.cognitiveservices.azure.com/'
analyze_url = endpoint + "vision/v3.0/analyze"

headers = {'Ocp-Apim-Subscription-Key': subscription_key,
           'Content-Type': 'application/octet-stream'}

# key step
# 0.1 更改‘visualFeatures’中的参数，to get你想要从api中得到的van意，如
# 物体坐标objects
# 颜色color
# 首次只需分析识别物体
params = {'visualFeatures': 'objects'}


# 剪切图片
def shear(x1, y1, w1, h1, path_shear, path_out_shear):
    # Pillow版
    #img = Image.open(path_shear)
    #cropped = img.crop((x1, y1, x1 + w1, y1 + h1))
    # cropped.save(path_out_shear)

    img = cv2.imread(path_shear)

    cropped = img[y1: y1+h1 , x1 :x1+w1]

    cv2.imwrite(path_out_shear, cropped)




# 设置表格样式
def set_style(name, height, bold=False):
    style = xlwt.XFStyle()
    font = xlwt.Font()
    font.name = name
    font.bold = bold
    font.color_index = 4
    font.height = height
    style.font = font
    return style

#
def write_excel(crop_path):
    f = xlwt.Workbook()
    sheet1 = f.add_sheet('color', cell_overwrite_ok=True)
    row0 = ["No", "dominantColorForeground", "dominantColorBackground", "dominantColors", "accentColor"]

    # 写第一行
    for i in range(0, len(row0)):
        sheet1.write(0, i, row0[i], set_style('Times New Roman', 220, True))

    # 写剩余数据
    # 先测出一共多少个数据,循环多少次
    list = os.listdir(crop_path)
    print(list)

    # 先检测有没有大小的问题，太小就变大
    for i in range(0, len(list)):

        path = os.path.join(crop_path, list[i])

        size = os.path.getsize(path)

        p0 = cv2.imread(path)
        a = p0.shape

        if size < 10000:
            large = cv2.resize(p0, (int(a[1] * 5), int(a[0] * 5)), interpolation=cv2.INTER_AREA)
            cv2.imwrite(path, large)

    #上传api分析
    for i in range(0, len(list)):

        path = os.path.join(crop_path, list[i])

        image_data = open(path, "rb").read()
        response = requests.post(analyze_url, headers=headers, params=params, data=image_data)
        response.raise_for_status()

        # api返回一个json格式的图片分析
        analysis = response.json()

        # 取出color
        dcf = analysis["color"]["dominantColorForeground"]
        dcb = analysis["color"]["dominantColorBackground"]
        dc = analysis["color"]["dominantColors"]
        ac = analysis["color"]["accentColor"]

        # show the image
        img_show = Image.open(BytesIO(image_data))
        plt.imshow(img_show)
        plt.axis("off")

        plt.show()

        # 写入excel中
        sheet1.write(i + 1, 0, i + 1)
        sheet1.write(i + 1, 1, dcf)
        sheet1.write(i + 1, 2, dcb)
        sheet1.write(i + 1, 3, dc)
        sheet1.write(i + 1, 4, ac)

    f.save('test.xls')


# 1.处理数据
# 把一张图片所有识别出来的对象全部裁剪出来，没有识别出对象的图片（像风景这种）复制一张到目标路径

# 根据输入的大师之名到本地指定文件夹读取数据
Master = input("请输入大师之名:")
image_path = "D:/360MoveData/Users/Alan/Desktop/paintings/" + Master + "/"
# 输出的目标路径
image_out_path = "D:/360MoveData/Users/Alan/Desktop/paintings/" + Master + "_crop/"

# 检查输出文件夹
if not os.path.exists(image_out_path):
    os.mkdir(image_out_path)

# 得到输入文件夹所有图片的命名，及数量
list = os.listdir(image_path)
print(list)

# 先检测有没有大小的问题,有就处理
for i in range(0, len(list)):
    path = os.path.join(image_path, list[i])

    size = os.path.getsize(path)

    img = cv2.imread(path)

    a = img.shape

    if size < 10000:
        p2 = cv2.resize(img, (int(a[1] * 5), int(a[0] * 5)), interpolation=cv2.INTER_AREA)
        cv2.imwrite(path, p2)
    elif size >= 4194304:
        p2 = cv2.resize(img, (int(a[1] / 1.5), int(a[0] / 1.5)), interpolation=cv2.INTER_AREA)
        cv2.imwrite(path, p2)

for i in range(0, len(list)):

    # 把图片传上到分析图像的api     Read the image into a byte array
    image = image_path + str(i + 1) + '.jpg'

    image_data = open(image, "rb").read()

    response = requests.post(analyze_url, headers=headers, params=params, data=image_data)

    response.raise_for_status()

    # api返回一个json格式的图片分析
    analysis = response.json()

    # 从analysis上得到你想要的东西，这里是第3个对象的坐标的 x
    # x= analysis["objects"][2]["rectangle"]["x"]
    # 取出description中的captions中的第一个text，并将首个字母变成大写
    # image_caption = analysis["description"]["captions"][0]["text"].capitalize()
    # 取出color
    # color = analysis["color"]
    # 识别出的物体个数
    j = len(analysis["objects"])

    # Display the image
    path = image

    img_show = Image.open(BytesIO(image_data))
    plt.imshow(img_show)
    plt.axis("off")

    plt.show()

    # 将输入文件夹原图复制到输出文件夹，增加样本量
    path_out = image_out_path + str(i + 1) + '.jpg'
    shutil.copy(path, path_out)

    if j == 0:

        continue

    elif j >= 1:

        for p in range(0, j):
            path_out = image_out_path + str(i + 1) + '_' + str(p + 1) + '.jpg'
            x = analysis["objects"][p]["rectangle"]["x"]
            y = analysis["objects"][p]["rectangle"]["y"]
            w = analysis["objects"][p]["rectangle"]["w"]
            h = analysis["objects"][p]["rectangle"]["h"]
            shear(x, y, w, h, path, path_out)

# 将裁剪后的图片上传到api上分析得出colors并输出到excel表格中

# 2.将处理后的数据上传api分析，并将api分析得到的配色方案导出到Excel中
image_path = image_out_path

# 处理后的数据只要分析配色
params = {'visualFeatures': 'color'}

write_excel(image_path)
